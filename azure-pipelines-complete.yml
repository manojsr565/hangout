# Complete Azure DevOps Pipeline for Dating Planner App
# This pipeline handles infrastructure, build, and deployment in a single workflow

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - docs/*

pr:
  branches:
    include:
      - main

variables:
  # Build configuration
  nodeVersion: '18.x'
  terraformVersion: '1.5.0'
  
  # Azure configuration
  azureServiceConnection: $(AZURE_SERVICE_CONNECTION)
  resourceGroupName: 'rg-dating-planner'
  staticWebAppName: 'swa-dating-planner'
  functionAppName: 'func-dating-planner'
  
  # Paths
  frontendPath: '.'
  backendPath: 'api'
  terraformPath: 'terraform'
  
  # Variable groups
  - group: dating-planner-secrets

stages:
  - stage: Infrastructure
    displayName: 'Deploy Infrastructure'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
      - job: DeployInfrastructure
        displayName: 'Deploy Azure Resources'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: $(terraformPath)
              backendServiceArm: $(azureServiceConnection)
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: $(terraformPath)
              environmentServiceNameAzureRM: $(azureServiceConnection)
              commandOptions: '-var="environment=prod" -var="notification_email=$(NOTIFICATION_EMAIL)"'
          
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: $(terraformPath)
              environmentServiceNameAzureRM: $(azureServiceConnection)
              commandOptions: '-var="environment=prod" -var="notification_email=$(NOTIFICATION_EMAIL)" -auto-approve'

  - stage: Build
    displayName: 'Build Applications'
    dependsOn: Infrastructure
    condition: always()
    jobs:
      - job: BuildApplications
        displayName: 'Build Frontend and Backend'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          # Setup Node.js
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)
          
          # Build Frontend
          - script: |
              echo "Building React Frontend..."
              npm ci
              npm run build
            displayName: 'Build React Frontend'
            workingDirectory: $(frontendPath)
          
          # Build Backend
          - script: |
              echo "Building Azure Functions Backend..."
              npm ci
              npm run build
              npm test
            displayName: 'Build and Test Backend'
            workingDirectory: $(backendPath)
          
          # Archive backend for deployment
          - task: ArchiveFiles@2
            displayName: 'Archive Backend Files'
            inputs:
              rootFolderOrFile: '$(backendPath)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
              replaceExistingArchive: true
          
          # Publish artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Frontend Artifacts'
            inputs:
              pathToPublish: '$(frontendPath)/dist'
              artifactName: 'frontend'
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Backend Artifacts'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/backend.zip'
              artifactName: 'backend'

  - stage: Deploy
    displayName: 'Deploy Applications'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployApplications
        displayName: 'Deploy to Azure'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                # Download artifacts
                - task: DownloadBuildArtifacts@0
                  displayName: 'Download All Artifacts'
                  inputs:
                    buildType: 'current'
                    downloadType: 'all'
                    downloadPath: '$(System.ArtifactsDirectory)'
                
                # Deploy to Static Web Apps
                - task: AzureStaticWebApp@0
                  displayName: 'Deploy Frontend to Static Web Apps'
                  inputs:
                    azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)
                    app_location: '$(System.ArtifactsDirectory)/frontend'
                    skip_app_build: true
                    skip_api_build: true
                
                # Deploy Azure Functions
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Backend to Function App'
                  inputs:
                    azureSubscription: $(azureServiceConnection)
                    appType: 'functionAppLinux'
                    appName: $(functionAppName)
                    package: '$(System.ArtifactsDirectory)/backend/backend.zip'
                    runtimeStack: 'NODE|18'
                    deploymentMethod: 'zipDeploy'
                    appSettings: |
                      -FUNCTIONS_WORKER_RUNTIME node
                      -WEBSITE_NODE_DEFAULT_VERSION ~18
                      -WEBSITE_RUN_FROM_PACKAGE 1
                      -WEBSITE_ENABLE_SYNC_UPDATE_SITE true

  - stage: Validate
    displayName: 'Validate Deployment'
    dependsOn: Deploy
    condition: succeeded()
    jobs:
      - job: PostDeploymentTests
        displayName: 'Run Post-Deployment Tests'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - script: |
              echo "Waiting for services to be ready..."
              sleep 60
              
              echo "Testing Static Web App..."
              response=$(curl -s -o /dev/null -w "%{http_code}" "https://$(staticWebAppName).azurestaticapps.net")
              if [ $response -eq 200 ]; then
                echo "✓ Static Web App is accessible (HTTP $response)"
              else
                echo "✗ Static Web App returned HTTP $response"
                exit 1
              fi
              
              echo "Testing Function App..."
              response=$(curl -s -o /dev/null -w "%{http_code}" "https://$(functionAppName).azurewebsites.net")
              if [ $response -eq 200 ] || [ $response -eq 404 ]; then
                echo "✓ Function App is accessible (HTTP $response)"
              else
                echo "✗ Function App returned HTTP $response"
                exit 1
              fi
              
              echo "✓ All deployment validation tests passed"
            displayName: 'Validate Deployments'